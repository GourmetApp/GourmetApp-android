apply plugin: 'com.android.library'

repositories {
    flatDir {
        dirs 'libs'
    }
}

android {

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.appCode
        versionName versions.appVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {

    // Support
    implementation "androidx.appcompat:appcompat:$versions.androidx"
    implementation "androidx.legacy:legacy-support-v4:$versions.androidx"
    implementation "com.google.android.material:material:$versions.androidx"

    // Firebase
    implementation "com.google.firebase:firebase-core:$versions.firebase"
    implementation "com.google.firebase:firebase-crash:$versions.firebase"
    implementation "com.google.firebase:firebase-database:$versions.firebase"
    implementation "com.google.firebase:firebase-auth:$versions.firebase"

    // RX
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava"

    // Ok HTTP
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.google.code.gson:gson:$versions.gson"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"

    // Test
    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "org.json:json:$versions.json"
}